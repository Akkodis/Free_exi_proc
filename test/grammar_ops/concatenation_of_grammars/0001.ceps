/*
    v2g-guru-exi - an EXI (= "Efficient XML Interchange") processor
    Copyright (C) 2022 Tomas Prerovsky <cepsdev@hotmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

Test{ConcatenationOfGrammarsBasicCases;};

FeaturesUndertest{
    ResolveConflictingLHS; 
    AppendProductionsOfG_R; 
    ReplaceEEsinGRWithGL_0;
    RemoveActionsAttachedToReplacedEE;  
};



kind GrammarTerminal;
kind GrammarNonterminal;
kind GrammarAnnotation;
kind GrammarAction;


comment{
"
 Declarations of used terminals/non-terminals. 
";};

GrammarNonterminal G_L_0,G_L_0_RHS_0,G_L_0_RHS_1,G_L_0_RHS_2;
GrammarNonterminal G_L_1,G_L_1_RHS_0,G_L_1_RHS_1,G_L_1_RHS_2;
GrammarNonterminal G_R_0,G_R_0_RHS_0,G_R_0_RHS_1,G_R_0_RHS_2;
GrammarNonterminal G_R_1,G_R_1_RHS_0,G_R_1_RHS_1,G_R_1_RHS_2;
GrammarNonterminal G_R_2,G_R_2_RHS_0,G_R_2_RHS_1,G_R_2_RHS_2;
GrammarTerminal T_0,T_1,T_2,T_3,EE;


comment{
"
 Left operand. 
";};

G_L{
    Grammar{
        lhs{G_L_0;};
            rhs{ T_0; G_L_0_RHS_0; };
            rhs{ T_1; G_L_0_RHS_1; };
            rhs{ T_2; G_L_0_RHS_2; };
        lhs{G_L_1;};
            rhs{ T_0; G_L_1_RHS_0; };
            rhs{ T_1; G_L_1_RHS_1; };
            rhs{ T_2; G_L_1_RHS_2; };
            rhs{ EE; };
    };
};

comment{
"
 Right operand. 
";};


G_R{
    Grammar{
        lhs{G_L_0;};
            rhs{ T_0; G_L_0_RHS_0; };
            rhs{ T_1; G_L_0_RHS_1; };
            rhs{ T_2; G_L_0_RHS_2; };
        lhs{G_R_1;};
            rhs{ T_0; G_L_0; };
            rhs{ T_1; G_R_1_RHS_1; };
            rhs{ T_2; G_R_1_RHS_2; };
            rhs{ EE; };
        lhs{G_R_2;};
            rhs{ T_0; G_R_2_RHS_0; };
            rhs{ T_1; G_R_2_RHS_1; };
            rhs{ T_2; G_R_2_RHS_2; };
            rhs{ EE; };
    };    
};


expectation{
    Grammar{
        lhs{G_L_0;};
            rhs{T_0;G_L_0_RHS_0;};
            rhs{T_1;G_L_0_RHS_1;};
            rhs{T_2;G_L_0_RHS_2;};
        lhs{G_L_1;};
            rhs{T_0;G_L_1_RHS_0;};
            rhs{T_1;G_L_1_RHS_1;};
            rhs{T_2;G_L_1_RHS_2;};
            rhs{G_L_0_1;};
        lhs{G_L_0_1;};
            rhs{ T_0; G_L_0_RHS_0; };
            rhs{ T_1; G_L_0_RHS_1; };
            rhs{ T_2; G_L_0_RHS_2; };
        lhs{G_R_1;};
            rhs{ T_0; G_L_0_1; };
            rhs{ T_1; G_R_1_RHS_1; };
            rhs{ T_2; G_R_1_RHS_2; };
            rhs{ EE; };
        lhs{G_R_2;};
            rhs{ T_0; G_R_2_RHS_0; };
            rhs{ T_1; G_R_2_RHS_1; };
            rhs{ T_2; G_R_2_RHS_2; };
            rhs{ EE; };
    };    
};   


result{
    exi_processor_operation(
        concatenate_grammars{            
            root.G_L.Grammar;
            root.G_R.Grammar;
        }
    );
};

val a = root.result.Grammar;
val b =  root.expectation.Grammar;
rr{
a == b;
};


kind Event;
Event evBasicCaseI_OK, evBasicCaseI_Failed;
Event evDidResolveConflictingLHS, evDidAppendProductionsOfG_R, evDidReplaceEEsinGRWithGL_0;
sm{
    as_identifier("'ConcatenationOfGrammars: Features'");
    cover{edges_upto_1;};
    states{
        Initial;
        for( e: root.FeaturesUndertest.content() ){ e; }
    };
    for( e: root.FeaturesUndertest.content() ){ 
         t{Initial;e;as_symbol("evDid"+text(e),"Event");}; 
         t{Initial;Initial;as_symbol("evDid"+text(e),"Event");};
    }
};

sm{
    root.Test.content();
    states{Initial;};
    sm {
        Verdict;
        states{Initial;Passed;Failed;};
        t{Initial;Passed;evBasicCaseI_OK;};
        t{Initial;Failed;evBasicCaseI_Failed;};
        t{Initial;Initial;evBasicCaseI_OK;};
        t{Initial;Initial;evBasicCaseI_Failed;};
    };
    t{Initial;Verdict;};
};


print("\n\n",root.rr,"\n\n");

Simulation{
 Start{root.Test.content();};
 if (1) {
     evBasicCaseI_OK;
 }
 else { 
     evBasicCaseI_Failed;
 }
 evDidReplaceEEsinGRWithGL_0;
 evDidAppendProductionsOfG_R;
};