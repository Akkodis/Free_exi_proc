label __2__1 title = "2.1 EXI Streams";
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"
EXI represents the contents of an XML document as an EXI stream. As shown below, an EXI stream consists
of an EXI header followed by an EXI body.


");

label __2__1_table title = "Table 2-1.  EXI Streams";
docinfo_se("===========");
EXIStream{
  EXIHeader{};
  EXIBody{};  
};
docinfo_se("===========");

docinfo_se(
"
The EXI header conveys format version information and may also include the
set of options that were used during encoding. If these options are omitted,
it is assumed that the decoder has access to then out of band. The EXI body
comprises an event sequence describing the document (or document fragment) that
is encoded. The following two sections describe the EXI header and EXI body
in more details.

");

label __2__1__1 title = "2.1.1 EXI Header";

docinfo_se(
"

The header communicates encoding properties that are needed to decode The
EXI body. The minimal header can be represented in a single byte This keeps
the overhead and complexity to a minimum and does not sacrifice compactness,
especially for small documents where a header can introduce a large constant
factor. 

The structure of an EXI header is depicted in the following figure.

");

label __2__1_table title = "Table 2-2.  EXI Header Structure";
kind DataType; DataType datatype;

macro  ComputeEXIFormatVersion{
  EXIFormatVersion{
    if(CompliantWithFinalEXIRecommendation) {
      bit{0;};
    }
    else{
      bit{1;};
      for (e : 1 .. (SupportedEXIVersion - 1) / 15){
        uint4{15;};
      }
      val r = SupportedEXIVersion - ((SupportedEXIVersion - 1) / 15)*15;
      if (  r >= 1 ) 
      {
        uint4{ r - 1; };
      }
    }
    };
};

EXIHeader{
  datatype;
  
  if(EXIHeaderCookie) {
    EXICookie{"$EXI";};
  }
  
  DistinguishingBits{uint2{2;};};
  PresenceBitForEXIOptions{
    bit{if (EXIHeaderOptionsPresent) 1; else 0;}; 
  };
  ComputeEXIFormatVersion{};
};

docinfo_se(
"

The EXI header starts with an optional four-byte EXI Cookie. The four byte
field consists of four characters '$','E','X' and 'I' in that order, each
represented as an ASCII octet, that can be used to distinguish an EXI stream
from a broad range of data streams.

The EXI Cookie is followed by a pair of Distinguishing Bits. The two bit-sequence
(1 0) can be used to distinguish an EXI document form a textual XML document
and is sufficient to distinguish EXI streams from XML streams based on a broad
range of character encodings.

The Presence Bit for EXI Options follows the Distinguishing Bits. The value
of this single bit is used to indicate the presence or absence of the EXI Options
that appear later in the header.

The EXI Format Version identifies the version of EXI in use and allows
future improvements and modifications.  A leading 0 (zero) bit indicates
that the document is encoded according to the final version of the recommendation,
while a leading 1 (one) indicates that it is a preview version. The differentiation
is introduced to facilitate early releases of preview versions withe less
strict interiperability requirements. Only final versions are requires to 
be processed by compliant processors. The leading bit is followed by one
or more 4-bit sequences whoh are collectively interpreted as a format version
number starting at 1. For example, the 4-bit sequence 0000 is interpreted
as version 1 and the two 4-bit sequences 1111 0001 are interpreted as 15 + 2
or version 17.

The EXI Options specify how the body of an EXI stream is encoded and, as srared earlier,
their presence is controlles by the presence bit earlier in the header. The overhead introduced
by the EXI options is comparatively small given that they are formally described using an XML schema
and are encoded using EXI as well. The following table describes the EXI options that can be
specified in the EXI header. When the EXI Options document does not specify a value for
a particular option the default value is assumed. 



");

label __2__3_table title = "Table 2-3.  EXI Options";

EXIOptions{
  kind EXIOptionName;
  EXIOptionName alignment, compression, strict, fragment, preserve, selfConained, schemaId,
                datatypeRepresentationMap, blockSize, valueMaxLength, valuePartiotionCapacity,
                user_defined_metadata;

  kind EXIOptionAlignment; EXIOptionAlignment bit_packed;
  val false = 0;
  val true = 1;

  EXIOptionEntry{EXIOption{alignment;};Description{"Alignment of event codes and content items.";};DefaultValue{bit_packed;};};
  EXIOptionEntry{EXIOption{compression;};Description{"Indicates if EXI compression is to be used for better compactness.";};DefaultValue{false;};};
  EXIOptionEntry{EXIOption{strict;};Description{"Strict interpretation of schema is used to achieve better compactness.";};DefaultValue{false;};};
  EXIOptionEntry{EXIOption{fragment;};Description{"Indicates if the body is to be encoded as an EXI fragment instead of an EXI document.";};DefaultValue{false;};};
  EXIOptionEntry{EXIOption{preserve;};Description{"A set of options that controls whether comments, processing instructions, etc. are preserved.";};DefaultValue{};};
  EXIOptionEntry{EXIOption{selfContained;};Description{"Enables self-contained elements. Seld-contained elements may be read independently from the rest of then EXI body.";};DefaultValue{false;};};
  EXIOptionEntry{EXIOption{schemaId;};Description{"Identify the schema information, if anym used to encode the body.";};DefaultValue{};};
  EXIOptionEntry{EXIOption{datatypeRepresentationMap;};Description{"Specify alternate datatype representations for typed values in the EXI body.";};DefaultValue{};};
  EXIOptionEntry{EXIOption{blockSize;};Description{"Specifies the number of Attribute (AT) and Character (CH) values for each block used for EXI compression";};DefaultValue{};};
  EXIOptionEntry{EXIOption{valueMaxLength;};Description{"Specifies the maximum string length of value content items to be considered for addition to the string table.";};DefaultValue{1000000;};};
  EXIOptionEntry{EXIOption{valuePartitionCapacity;};Description{"Specifies the total vapacity of value partitions in a string table";};DefaultValue{};};
  EXIOptionEntry{EXIOption{user_defined_meta_data;};Description{"User defined options may be added";};DefaultValue{};};
};

docinfo_se(
"

Most of the options are straightforward and act as boolean values to enable or disable a feature.
They are represented using optional XML elements which are also encoded using EXI. For more information
on the XML schema that is used to encode these options, the reader is referred to XML Schema for EXI Header.

The preserve options shown in the table above are really a family of options that control which XML items
are preserved and which XML items are ignored. These are collectively known as fidelity options.
These options can be used to eliminate the associated overhead of communicating unused XML items.
Certain XML items such as processing instructions or DTDs may never occur (like in SOAP) or are 
simply unimportant to the use case or application domain. Fidelity options are used to manage filters
for certain XML items as shown in the following table.
");

label __2__4_table title = "Table 2-4.  Fidelity Options";
FidelityOptions{
 kind EXIOptionPreserve;
 EXIOptionPreserve comments, pis, dtd, prefixes, lexicalValues;
 FidelityOption{
  Name{comments;};
  Effect{"Productions of CM (Comments) events are preserves in grammars.";};
 };
 FidelityOption{
  Name{pis;};
  Effect{"Productions od PI (Processing instructions) events are preserved in grammars.";};
 };
 FidelityOption{
  Name{dtd;};
  Effect{"Productions of DOCTYPE and ER (Entity Reference) events are preserved.";};
 };
 FidelityOption{
  Name{prefixes;};
  Effect{"NS(Namespace Declaration) events and namespace prefixes are preserved.";};
 };
 FidelityOption{
  Name{lexicalValues;};
  Effect{"Lexical form of element and attribute values is perserved.";};
 };

};

docinfo_se(
"

Naturally, XML items that are discarded at encoding time (due to a particular setting of the fidelity options)
cannot be reconstructed exactly at decoding time. The next section deals with the EXI Body and discusses
in more detail the effects of enabling and disabling fidelity options.

");


label __2__1_EXIFormatVersion_Examples title = "2.1.1.1 [Not in original document] Appendix: Examples for Formatting of the expected EXI Version.";

docinfo_se(
"
Throughout this section the variable *CompliantWithFinalEXIRecommendation* has value 0.

");
val CompliantWithFinalEXIRecommendation = 0;

docinfo_se(
"
SupportedEXIVersion = 1.

");


val SupportedEXIVersion = 1;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 2.

");

let SupportedEXIVersion = 2;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 14.

");

let SupportedEXIVersion = 14;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 15.

");

let SupportedEXIVersion = 15;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 16.

");

let SupportedEXIVersion = 16;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 17.

");

let SupportedEXIVersion = 17;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 30.

");

let SupportedEXIVersion = 30;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 31.

");

let SupportedEXIVersion = 31;
ComputeEXIFormatVersion{};

docinfo_se(
"
SupportedEXIVersion = 32.

");

let SupportedEXIVersion = 32;
ComputeEXIFormatVersion{};




label __2__1__2 title = "2.1.2 EXI Body";

docinfo_se(
"

The body of an EXI document is composed of a sequence of EXI events. The notion of an event in this
context is similar to that in then StAX and SAX APIs. XML items are encoded into one or more EXI ecents;
for example, an attribute named foo can be encoded as AT(\"foo\") and an element named bar as the pair
of events SE(\"bar\") and EE. EXI events may have assitional content associated with them. For example,
the attribute event AT(\"foo\") may have an attribute value foo1 associated with it. The following table
shows all the possible event types together with their associated information items distinguished
by structure and content. In EXI terminology content denotes attribute ans character values while all
other information items are considered as belonging to the structure category.

");

label __2__5_table title = "Table 2-5.  EXI Event types";

kind GrammarTerminal;
kind GrammarNonterminal;
kind GrammarAnnotation;
kind GrammarAction;

kind XMLEntity;

GrammarTerminal    
    SD, 
    ED, 
    SE, 
    EE, 
    AT, 
    CH, 
    NS, 
    CM, 
    PI, 
    DT, 
    ER, 
    SC;

GrammarAction 
 PopGrammar;

XMLEntity
    qname, 
    uri;

EXIEventTypes{
 EXIEvent{
  Type{docinfo_se("Start Document");};
  GrammarNotation{SD;};
  InformationItems{
    Structure{};
    Content{};
  };
 };
 EXIEvent{
  Type{docinfo_se("End Document");};
  GrammarNotation{ED;};
  InformationItems{
    Structure{};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Start Element");};
  GrammarNotation{SE(qname);};
  InformationItems{
    Structure{optional(prefix);};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Start Element");};
  GrammarNotation{SE(uri:_*_);};
  InformationItems{
    Structure{local_name;optional(prefix);};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Start Element");};
  GrammarNotation{SE(_*_);};
  InformationItems{
    Structure{qname;optional(prefix);};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("End Element");};
  GrammarNotation{EE;};
  InformationItems{
    Structure{};
    Content{};
  };
 };
 EXIEvent{
  Type{docinfo_se("Attribute");};
  GrammarNotation{AT(qname);};
  InformationItems{
    Structure{optional(prefix);};
    Content{value;};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Attribute");};
  GrammarNotation{AT(uri:_*_);};
  InformationItems{
    Structure{local_name;optional(prefix);};
    Content{value;};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Attribute");};
  GrammarNotation{AT(_*_);};
  InformationItems{
    Structure{qname;optional(prefix);};
    Content{value;};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Namespace Declaration");};
  GrammarNotation{NS;};
  InformationItems{
    Structure{uri;prefix;local_element_ns;};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Comment");};
  GrammarNotation{CM;};
  InformationItems{
    Structure{text;};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Processing Instruction");};
  GrammarNotation{PI;};
  InformationItems{
    Structure{name;text;};
    Content{};
  };
 };
 EXIEvent{
  Type{docinfo_se("DOCTYPE");};
  GrammarNotation{DT;};
  InformationItems{
    Structure{name;public;system;text;};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Entity Reference");};
  GrammarNotation{ER;};
  InformationItems{
    Structure{name;};
    Content{};
  };
 }; 
 EXIEvent{
  Type{docinfo_se("Self Contained");};
  GrammarNotation{SC;};
  InformationItems{
    Structure{};
    Content{};
  };
 };
};

docinfo_se("

For named XML items, such as elements and attributes, there are three types of events: SE(qname),SE(uri:_*_) and SE(_*_)
as well as AT(qname), AT(uri:_*_) and AT(_*_). These events differ in their associated structure: when SE(qname) or
AT(qname) are used, the actual qname of the XML item is *not* encoded as part of the event whilt SE(uri:_*_) and
AT(uri:_*_) events do not encode the uri. The decision to use one type og event over the other will be explained
later after introducing the notion of EXI grammars. Additionally, Fidelity Options may allow the preservation of
namespace prefixes.

The fidelity options introduced in section 2.1.1 EXI Header may be used to prune EXI events such as Namespace Declarations (NS),
Comment (CM), Processing Instructions (PI), DOCTYPE (DT) or Entity Reference (ER). Grammar pruning simplifies the
encoding and decoding process and also improves compactness by filtering out unused event types.

Consider a simple XML document form a notebook application:

");



docinfo_se("

<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<notebook date=\"2007-09-12\">
 <note category=\"EXI\" date=\"2007-07-23\">
  <subject>EXI</subject>
  <body>Do not forget it!</body>
 </note>
 <note category=\"EXI\" date=\"2007-09-12\">
  <subject>Shopping List</subject>
  <body>milk, honey</body>
 </note>
</notebook>

");
























