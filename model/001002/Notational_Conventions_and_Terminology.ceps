label __1__2 title = "1.2 Notational Conventions and Terminology";
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"

"

);


example{
    kind GrammarNonterminal;
    kind GrammarTerminal;
    kind GrammarAnnotation;

    label __1__1_grammar title="";
    GrammarNonterminal LeftHandSide;
    GrammarNonterminal NonTerminal_1;
    GrammarNonterminal NonTerminal_2;
    GrammarNonterminal NonTerminal_3;
    GrammarNonterminal NonTerminal_n;

    GrammarTerminal Terminal_1;
    GrammarTerminal Terminal_2;
    GrammarTerminal Terminal_3;
    GrammarTerminal Terminal_n;
    GrammarAnnotation EventCode;

    Grammar{
            lhs{NonTerminal_1;};
                rhs{Terminal_1; NonTerminal_1;EventCode(1); };
                rhs{Terminal_2; NonTerminal_2;EventCode(2); };
                rhs{Terminal_3; NonTerminal_3;EventCode(3); };
                rhs{Terminal_n; NonTerminal_n;EventCode(n); };
          
    };
};

kind EXIConcept_Grammar_EachLHSContainsExactlyOneNonTerminal;
kind EXIConcept_Grammar_NoDanglingLHS;

EXIConcept_Grammar_EachLHSContainsExactlyOneNonTerminal 
 EachLHSContainsExactlyOneNonTerminal;
EXIConcept_Grammar_NoDanglingLHS NoDanglingLHS;

val check_1_2_ex_1 = exi_processor_check(
    input{
        check_for{
            EachLHSContainsExactlyOneNonTerminal;
            NoDanglingLHS;
        };
        root.example.last().content().Grammar;
    }
); 

if(check_1_2_ex_1.result.ok.content() == 0){
    kind DocgenWarning;
    DocgenWarning warn;
    warn("exi_processor_check() failed: "); 
    check_1_2_ex_1.result.details.content();
}
