label __1 title = "1. Introduction";
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"

The Efficient XML Interchange (EXI) format is a very compact, high performance XML representation
that was desigend to work well for a broad range of applications. It simultaneously improves
performance and significantly reduces bandwidth requirements without compromising efficient
usse of other resources such as battery life, code size, processing power, and memory.

EXI uses a grammar-driven approach that achieves very efficient encodings using a straightforward
encodeing algorithm ans a small set of datatype representations. Consequently, EXI processors are
relatively simple ans can be implmented on devices with limited capacity.

EXI is schema \"informed\", meaning that it can utilize available schema information to improve
compactness and performance, but does not depend on accurate, complete or current schemas to work.
It supports arbitrary schema extensions and deviations and also works very effectively with 
partial schemas or in the absence of any schema. The language, or format, for schema information.

");

Definition{
    docinfo_se(

    "
 A program module called an EXI processor, whether it is software or hardware,
 is used by application programs to encode their structured data into EXI
 streams and/or to decode EXI streams to make the structured data accessible.
 The former and latter aforementioned roles of EXI processors are called");
 Definition{
    docinfo_se("EXI stream encoder ");
 };
 docinfo_se("and");
 Definition{
    docinfo_se("EXI stream decoder,");
 };
 docinfo_se(" respectively. This document not only specifies the EXI format,
 but also defines errors that EXI processors are required to detect and behave upon. 
 
 The primary goal of this document is to define the EXI format completely without
 leaving ambiguity so as to make it feasible for implementations to interoperate.
 As such, the document lends itself to describing the design and features of the
 format in a systematic manner, often declaratively with relatively few prosaic
 annotations and examples. Those readers who prefer a step-by-step Introduction
 to the EXI format design and features are suggested to start with the non-normative
 [EXI Primer].
 ");
};

 sm{
    as_identifier("EXI processor");
    kind Event;
    Event EncodeStructuredData, DecodeStream;
    states{Initial;};
    sm{
      as_identifier("stream encoder");
      states{Initial;WaitForData;ProcessData;};
      t{Initial;WaitForData;};
      t{WaitForData;ProcessData;EncodeStructuredData;};
      t{ProcessData;WaitForData;};
    };
    sm{
      as_identifier("stream decoder");
      states{Initial;WaitForData;ProcessData;};
      t{Initial;WaitForData;};
      t{WaitForData;ProcessData;DecodeStream;};
      t{ProcessData;WaitForData;};
    };
    t{Initial;as_identifier("stream encoder");};
    t{Initial;as_identifier("stream decoder");};
 };










